// Package hello comment
// This file war generated by trpc4videopacket 1.1.0
// Generated from hello.jce
package hello

import (
	"context"
	"strings"

	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

/**********************************************************************************/
// Server
/**********************************************************************************/

// Greeting defines service interface Greeting
type Greeting interface {
	Get(ctx context.Context, req *GetReq, rsp *GetRsp) (err error)
}

// GreetingGetHandler used to call the server side implemnet for the method defined in the jce file
func GreetingGetHandler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {
	_req := &GetReq{}
	_rsp := &GetRsp{}

	filters, err := f(_req)
	if err != nil {
		return nil, err
	}

	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {

		return svr.(Greeting).Get(ctx, reqbody.(*GetReq), rspbody.(*GetRsp))

	}
	err = filters.Handle(ctx, _req, _rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return _rsp, nil
}

// GreetingServiceDesc  descriptor for server.RegisterService
var GreetingServiceDesc = server.ServiceDesc{
	ServiceName: "TestDemo",
	HandlerType: ((*Greeting)(nil)),
	Methods: []server.Method{
		server.Method{
			Name: "TestDemo/Get",
			Func: GreetingGetHandler,
		},
		server.Method{
			Name: "cmd_0x1",
			Func: GreetingGetHandler,
		},
	},
}

// RegisterGreetingService register service
func RegisterGreetingService(s server.Service, svr Greeting) error {
	return s.Register(&GreetingServiceDesc, svr)
}

/**********************************************************************************/
// Client
/**********************************************************************************/

// GreetingProxy defines service client proxy
type GreetingProxy interface {
	Get(ctx context.Context, req *GetReq, _opt ...client.Option) (*GetRsp, error)
}

// NewGreetingProxy will new a proxy
func NewGreetingProxy(name string) GreetingProxy {
	return &GreetingProxyImpl{Client: client.DefaultClient, Name: name}
}

// GreetingProxyImpl is the client impl
type GreetingProxyImpl struct {
	Client client.Client
	Name   string
}

// Get is the client proxy function for the method defined in the jce file
func (_obj *GreetingProxyImpl) Get(ctx context.Context, req *GetReq, _opts ...client.Option) (rsp *GetRsp, err error) {

	// msg
	ctx, msg := codec.WithCloneMessage(ctx)
	msg.WithSerializationType(codec.SerializationTypeJCE)
	// the format of service_name should conform to the three-part or four-part
	// name: trpc.{app}.{server} or trpc.{app}.{server}.{service}
	names := strings.Split(_obj.Name, ".")
	if len(names) >= 4 {
		msg.WithCalleeApp(names[1])
		msg.WithCalleeServer(names[2])
		msg.WithCalleeService(names[3])
	}
	msg.WithCalleeServiceName(_obj.Name)
	msg.WithCalleeMethod("Get")
	msg.WithClientRPCName("Get")

	rsp = &GetRsp{}
	// client invoke
	err = _obj.Client.Invoke(ctx, req, rsp, _opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}
