// Package commhead comment
// This file war generated by trpc4videopacket 1.0
// Generated from VideoCommHead.jce
package commhead

import (
	"fmt"
	"git.code.oa.com/jce/jce"
)

// LogReport struct implement
type LogReport struct {
	PageId    string `json:"pageId"`
	RefPageId string `json:"refPageId"`
	PageStep  int32  `json:"pageStep"`
	CallType  string `json:"callType"`
	IsAuto    int32  `json:"isAuto"`
	Vid       string `json:"vid"`
	Pid       string `json:"pid"`
	SFromInfo string `json:"sFromInfo"`
	ChannelId string `json:"channelId"`
	Mid       string `json:"mid"`
	Extent    string `json:"extent"`
}

func (st *LogReport) ResetDefault() {
}

// ReadFrom reads  from _is and put into struct.
func (st *LogReport) ReadFrom(_is *jce.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.PageId, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.RefPageId, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.PageStep, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.CallType, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.IsAuto, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Vid, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Pid, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SFromInfo, 7, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.ChannelId, 8, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Mid, 9, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Extent, 10, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *LogReport) ReadBlock(_is *jce.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(jce.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require LogReport, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *LogReport) WriteTo(_os *jce.Buffer) error {
	var err error
	_ = err

	err = _os.Write_string(st.PageId, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.RefPageId, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.PageStep, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.CallType, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.IsAuto, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Vid, 5)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Pid, 6)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SFromInfo, 7)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.ChannelId, 8)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Mid, 9)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Extent, 10)
	if err != nil {
		return err
	}

	return nil
}

//WriteBlock encode struct
func (st *LogReport) WriteBlock(_os *jce.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(jce.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(jce.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
