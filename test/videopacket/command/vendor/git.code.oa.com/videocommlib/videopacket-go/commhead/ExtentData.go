// Package commhead comment
// This file war generated by trpc4videopacket 1.0
// Generated from VideoCommHead.jce
package commhead

import (
	"fmt"
	"git.code.oa.com/jce/jce"
)

// ExtentData struct implement
type ExtentData struct {
	CheckFlag  int32        `json:"checkFlag"`
	FlagByte   int8         `json:"flagByte"`
	Extent     string       `json:"extent"`
	BlankId    int32        `json:"blankId"`
	BucketInfo BucketConfig `json:"bucketInfo"`
}

func (st *ExtentData) ResetDefault() {
}

// ReadFrom reads  from _is and put into struct.
func (st *ExtentData) ReadFrom(_is *jce.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.CheckFlag, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_int8(&st.FlagByte, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Extent, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.BlankId, 3, false)
	if err != nil {
		return err
	}

	err = st.BucketInfo.ReadBlock(_is, 4, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *ExtentData) ReadBlock(_is *jce.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(jce.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ExtentData, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *ExtentData) WriteTo(_os *jce.Buffer) error {
	var err error
	_ = err

	err = _os.Write_int32(st.CheckFlag, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int8(st.FlagByte, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Extent, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.BlankId, 3)
	if err != nil {
		return err
	}

	err = st.BucketInfo.WriteBlock(_os, 4)
	if err != nil {
		return err
	}

	return nil
}

//WriteBlock encode struct
func (st *ExtentData) WriteBlock(_os *jce.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(jce.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(jce.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
