// Package commhead comment
// This file war generated by trpc4videopacket 1.0
// Generated from VideoCommHead.jce
package commhead

import (
	"fmt"
	"git.code.oa.com/jce/jce"
)

// HttpResponse struct implement
type HttpResponse struct {
	HttpActions []HttpKV `json:"HttpActions"`
	ReturnBody  string   `json:"ReturnBody"`
}

func (st *HttpResponse) ResetDefault() {
}

// ReadFrom reads  from _is and put into struct.
func (st *HttpResponse) ReadFrom(_is *jce.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err, have, ty = _is.SkipToNoCheck(0, false)
	if err != nil {
		return err
	}

	if have {
		if ty == jce.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.HttpActions = make([]HttpKV, length, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = st.HttpActions[i0].ReadBlock(_is, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == jce.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = _is.Read_string(&st.ReturnBody, 1, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *HttpResponse) ReadBlock(_is *jce.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(jce.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require HttpResponse, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *HttpResponse) WriteTo(_os *jce.Buffer) error {
	var err error
	_ = err

	err = _os.WriteHead(jce.LIST, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.HttpActions)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.HttpActions {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	err = _os.Write_string(st.ReturnBody, 1)
	if err != nil {
		return err
	}

	return nil
}

//WriteBlock encode struct
func (st *HttpResponse) WriteBlock(_os *jce.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(jce.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(jce.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
