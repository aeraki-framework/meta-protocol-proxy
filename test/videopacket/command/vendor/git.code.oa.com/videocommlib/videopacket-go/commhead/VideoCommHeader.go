// Package commhead comment
// This file war generated by trpc4videopacket 1.0
// Generated from VideoCommHead.jce
package commhead

import (
	"fmt"
	"git.code.oa.com/jce/jce"
)

// VideoCommHeader struct implement
type VideoCommHeader struct {
	BasicInfo    HBasicInfo                   `json:"BasicInfo"`
	AccessInfo   HAccessInfo                  `json:"AccessInfo"`
	LoginTokens  []HLoginToken                `json:"LoginTokens"`
	Body         string                       `json:"body"`
	AccCmdBody   []HAccCmdBody                `json:"AccCmdBody"`
	HttpBody     HttpData                     `json:"HttpBody"`
	BusinessHead BusinessHead                 `json:"businessHead"`
	ServerRoute  ServerRoute                  `json:"serverRoute"`
	MapExtReport map[string]map[string]string `json:"mapExtReport"`
}

func (st *VideoCommHeader) ResetDefault() {
}

// ReadFrom reads  from _is and put into struct.
func (st *VideoCommHeader) ReadFrom(_is *jce.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = st.BasicInfo.ReadBlock(_is, 0, true)
	if err != nil {
		return err
	}

	err = st.AccessInfo.ReadBlock(_is, 1, true)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(2, false)
	if err != nil {
		return err
	}

	if have {
		if ty == jce.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.LoginTokens = make([]HLoginToken, length, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = st.LoginTokens[i0].ReadBlock(_is, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == jce.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = _is.Read_string(&st.Body, 3, false)
	if err != nil {
		return err
	}

	err, have, ty = _is.SkipToNoCheck(4, false)
	if err != nil {
		return err
	}

	if have {
		if ty == jce.LIST {
			err = _is.Read_int32(&length, 0, true)
			if err != nil {
				return err
			}

			st.AccCmdBody = make([]HAccCmdBody, length, length)
			for i1, e1 := int32(0), length; i1 < e1; i1++ {

				err = st.AccCmdBody[i1].ReadBlock(_is, 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == jce.SIMPLE_LIST {
			err = fmt.Errorf("not support simple_list type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = st.HttpBody.ReadBlock(_is, 5, false)
	if err != nil {
		return err
	}

	err = st.BusinessHead.ReadBlock(_is, 6, false)
	if err != nil {
		return err
	}

	err = st.ServerRoute.ReadBlock(_is, 7, false)
	if err != nil {
		return err
	}

	err, have = _is.SkipTo(jce.MAP, 9, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.MapExtReport = make(map[string]map[string]string)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {
			var k2 string
			var v2 map[string]string

			err = _is.Read_string(&k2, 0, false)
			if err != nil {
				return err
			}

			err, have = _is.SkipTo(jce.MAP, 1, false)
			if err != nil {
				return err
			}

			if have {
				err = _is.Read_int32(&length, 0, true)
				if err != nil {
					return err
				}

				v2 = make(map[string]string)
				for i3, e3 := int32(0), length; i3 < e3; i3++ {
					var k3 string
					var v3 string

					err = _is.Read_string(&k3, 0, false)
					if err != nil {
						return err
					}

					err = _is.Read_string(&v3, 1, false)
					if err != nil {
						return err
					}

					v2[k3] = v3
				}
			}

			st.MapExtReport[k2] = v2
		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *VideoCommHeader) ReadBlock(_is *jce.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(jce.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require VideoCommHeader, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *VideoCommHeader) WriteTo(_os *jce.Buffer) error {
	var err error
	_ = err

	err = st.BasicInfo.WriteBlock(_os, 0)
	if err != nil {
		return err
	}

	err = st.AccessInfo.WriteBlock(_os, 1)
	if err != nil {
		return err
	}

	err = _os.WriteHead(jce.LIST, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.LoginTokens)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.LoginTokens {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	err = _os.Write_string(st.Body, 3)
	if err != nil {
		return err
	}

	err = _os.WriteHead(jce.LIST, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.AccCmdBody)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.AccCmdBody {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return err
		}

	}

	err = st.HttpBody.WriteBlock(_os, 5)
	if err != nil {
		return err
	}

	err = st.BusinessHead.WriteBlock(_os, 6)
	if err != nil {
		return err
	}

	err = st.ServerRoute.WriteBlock(_os, 7)
	if err != nil {
		return err
	}

	err = _os.WriteHead(jce.MAP, 9)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.MapExtReport)), 0)
	if err != nil {
		return err
	}

	for k4, v4 := range st.MapExtReport {

		err = _os.Write_string(k4, 0)
		if err != nil {
			return err
		}

		err = _os.WriteHead(jce.MAP, 1)
		if err != nil {
			return err
		}

		err = _os.Write_int32(int32(len(v4)), 0)
		if err != nil {
			return err
		}

		for k5, v5 := range v4 {

			err = _os.Write_string(k5, 0)
			if err != nil {
				return err
			}

			err = _os.Write_string(v5, 1)
			if err != nil {
				return err
			}

		}
	}

	return nil
}

//WriteBlock encode struct
func (st *VideoCommHeader) WriteBlock(_os *jce.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(jce.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(jce.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
