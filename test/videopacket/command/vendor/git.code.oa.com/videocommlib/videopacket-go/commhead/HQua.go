// Package commhead comment
// This file war generated by trpc4videopacket 1.0
// Generated from VideoCommHead.jce
package commhead

import (
	"fmt"
	"git.code.oa.com/jce/jce"
)

// HQua struct implement
type HQua struct {
	VersionName     string            `json:"versionName"`
	VersionCode     string            `json:"versionCode"`
	ScreenWidth     int32             `json:"screenWidth"`
	ScreenHeight    int32             `json:"screenHeight"`
	Platform        int32             `json:"platform"`
	PlatformVersion string            `json:"platformVersion"`
	MarkerId        int32             `json:"markerId"`
	NetworkMode     int32             `json:"networkMode"`
	DensityDpi      int32             `json:"densityDpi"`
	ChannelId       string            `json:"channelId"`
	Imei            string            `json:"imei"`
	Imsi            string            `json:"imsi"`
	Idfa            string            `json:"idfa"`
	OmgId           string            `json:"omgId"`
	Extent          string            `json:"extent"`
	ExtentData      ExtentData        `json:"extentData"`
	OemPlatForm     int32             `json:"oemPlatForm"`
	StrategyControl string            `json:"strategyControl"`
	IsSupportDolby  int32             `json:"isSupportDolby"`
	SClientKey      string            `json:"sClientKey"`
	SMac            string            `json:"sMac"`
	ServerId        string            `json:"serverId"`
	Coordinates     Coordinates       `json:"coordinates"`
	DeviceId        string            `json:"deviceId"`
	DeviceModel     string            `json:"deviceModel"`
	DeviceType      int32             `json:"deviceType"`
	MobileISP       int32             `json:"mobileISP"`
	AreaMode        int32             `json:"areaMode"`
	SafeInfo        SafeInfo          `json:"safeInfo"`
	LaunchType      int32             `json:"launchType"`
	Sessionid       string            `json:"sessionid"`
	CountryCode     int32             `json:"countryCode"`
	LangCode        int32             `json:"langCode"`
	AppSubVersion   string            `json:"appSubVersion"`
	RetryFlag       int32             `json:"retryFlag"`
	ExtInfo         map[string]string `json:"extInfo"`
}

func (st *HQua) ResetDefault() {
}

// ReadFrom reads  from _is and put into struct.
func (st *HQua) ReadFrom(_is *jce.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_string(&st.VersionName, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.VersionCode, 1, true)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.ScreenWidth, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.ScreenHeight, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Platform, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.PlatformVersion, 5, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.MarkerId, 6, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.NetworkMode, 7, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.DensityDpi, 8, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.ChannelId, 9, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Imei, 10, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Imsi, 11, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Idfa, 12, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.OmgId, 13, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Extent, 14, false)
	if err != nil {
		return err
	}

	err = st.ExtentData.ReadBlock(_is, 15, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.OemPlatForm, 16, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.StrategyControl, 17, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.IsSupportDolby, 18, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SClientKey, 19, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.SMac, 20, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.ServerId, 21, false)
	if err != nil {
		return err
	}

	err = st.Coordinates.ReadBlock(_is, 22, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.DeviceId, 23, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.DeviceModel, 24, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.DeviceType, 25, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.MobileISP, 26, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.AreaMode, 27, false)
	if err != nil {
		return err
	}

	err = st.SafeInfo.ReadBlock(_is, 28, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.LaunchType, 29, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Sessionid, 30, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.CountryCode, 31, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.LangCode, 32, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.AppSubVersion, 33, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.RetryFlag, 34, false)
	if err != nil {
		return err
	}

	err, have = _is.SkipTo(jce.MAP, 35, false)
	if err != nil {
		return err
	}

	if have {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return err
		}

		st.ExtInfo = make(map[string]string)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 string
			var v0 string

			err = _is.Read_string(&k0, 0, false)
			if err != nil {
				return err
			}

			err = _is.Read_string(&v0, 1, false)
			if err != nil {
				return err
			}

			st.ExtInfo[k0] = v0
		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *HQua) ReadBlock(_is *jce.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(jce.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require HQua, but not exist. tag %d", tag)
		}
		return nil

	}

	st.ReadFrom(_is)

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *HQua) WriteTo(_os *jce.Buffer) error {
	var err error
	_ = err

	err = _os.Write_string(st.VersionName, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.VersionCode, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.ScreenWidth, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.ScreenHeight, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Platform, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.PlatformVersion, 5)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.MarkerId, 6)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.NetworkMode, 7)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.DensityDpi, 8)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.ChannelId, 9)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Imei, 10)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Imsi, 11)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Idfa, 12)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.OmgId, 13)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Extent, 14)
	if err != nil {
		return err
	}

	err = st.ExtentData.WriteBlock(_os, 15)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.OemPlatForm, 16)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.StrategyControl, 17)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.IsSupportDolby, 18)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SClientKey, 19)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.SMac, 20)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.ServerId, 21)
	if err != nil {
		return err
	}

	err = st.Coordinates.WriteBlock(_os, 22)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.DeviceId, 23)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.DeviceModel, 24)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.DeviceType, 25)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.MobileISP, 26)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.AreaMode, 27)
	if err != nil {
		return err
	}

	err = st.SafeInfo.WriteBlock(_os, 28)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.LaunchType, 29)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Sessionid, 30)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.CountryCode, 31)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.LangCode, 32)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.AppSubVersion, 33)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.RetryFlag, 34)
	if err != nil {
		return err
	}

	err = _os.WriteHead(jce.MAP, 35)
	if err != nil {
		return err
	}

	err = _os.Write_int32(int32(len(st.ExtInfo)), 0)
	if err != nil {
		return err
	}

	for k1, v1 := range st.ExtInfo {

		err = _os.Write_string(k1, 0)
		if err != nil {
			return err
		}

		err = _os.Write_string(v1, 1)
		if err != nil {
			return err
		}

	}

	return nil
}

//WriteBlock encode struct
func (st *HQua) WriteBlock(_os *jce.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(jce.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	st.WriteTo(_os)

	err = _os.WriteHead(jce.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
